# Generated by Django 4.2.16 on 2024-10-21 00:43

from django.db import migrations

from scrap import utils as sc_utils


def forwards(apps, schema_editor):
    SourceItem = apps.get_model("inventory", "SourceItem")
    batch = []
    update_fields = [
        "adjusted_count", "adjusted_pack_quantity", "adjusted_weight", "adjusted_weight_unit",
        "adjusted_per_weight_cost", "adjusted_pack_cost",]
    for si in SourceItem.objects.all():
        if not (si.pack_cost and si.pack_quantity and si.delivered_quantity):
            continue
        si.adjusted_pack_quantity = si.pack_quantity
        si.adjusted_count = si.unit_quantity
        if si.unit_size:
            adjusted_units = sc_utils.split_units(si.unit_size)
            if adjusted_units['unit'] == "ct" and si.adjusted_count != adjusted_units['amount']:
                # Old data sometimes has unit_quantity = 50 and unit_size = "50lb"
                si.adjusted_weight = adjusted_units['amount']
                si.adjusted_weight_unit = adjusted_units['unit']
            if adjusted_units['unit'] == "lb" and si.adjusted_count == adjusted_units['amount']:
                si.adjusted_weight = adjusted_units['amount']
                si.adjusted_weight_unit = adjusted_units['unit']
                si.adjusted_count = 1
                si.adjusted_per_weight_cost = (
                        si.pack_cost / si.adjusted_pack_quantity / si.adjusted_count / si.adjusted_weight)
        # Assuming the extended cost has already been set.
        if si.total_weight:
            si.adjusted_per_weight_cost = si.pack_cost
            si.adjusted_pack_cost = si.extended_cost / si.delivered_quantity
        else:
            si.adjusted_pack_cost = si.pack_cost
        si.remaining_pack_quantity = si.adjusted_pack_quantity * si.delivered_quantity
        si.remaining_count_quantity = 0
        batch.append(si)
        if len(batch) == 500:
            SourceItem.objects.bulk_update(batch, fields=update_fields)
            batch = []
    if batch:
        SourceItem.objects.bulk_update(batch, fields=update_fields)
    # TODO: unit_size = "8-13#" makes adjusted_weight=8 and adjusted_weight_unit="-13#"
    # TODO: unit_size = "2000ct" makes adjusted_weight=2000 and adjusted_weight_unit="ct"
    # TODO: 50lb sugar makes count=50 and weight=""


def reverse_code(apps, schema_editor):
    SourceItem = apps.get_model("inventory", "SourceItem")
    batch = []
    update_fields = [
        "adjusted_count", "adjusted_pack_quantity", "adjusted_weight", "adjusted_weight_unit",
        "adjusted_per_weight_cost", "adjusted_pack_cost",]
    for si in SourceItem.objects.all():
        if not (si.pack_cost and si.pack_quantity and si.delivered_quantity):
            continue
        si.adjusted_count = 1
        si.adjusted_pack_quantity = 1
        si.adjusted_weight = 0.0
        si.adjusted_weight_unit = ""
        si.adjusted_per_weight_cost = 0
        si.adjusted_pack_cost = 0
        si.remaining_pack_quantity = 0
        si.remaining_count_quantity = 0
        batch.append(si)
        if len(batch) == 500:
            SourceItem.objects.bulk_update(batch, fields=update_fields)
            batch = []
    if batch:
        SourceItem.objects.bulk_update(batch, fields=update_fields)


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0030_sourceitem_adjusted_count_and_more'),
    ]

    operations = [
        migrations.RunPython(forwards, reverse_code=reverse_code),
    ]
