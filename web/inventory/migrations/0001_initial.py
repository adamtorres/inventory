# Generated by Django 4.0.1 on 2022-03-20 01:23

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import scrap.models.fields.char_field
import scrap.models.fields.decimal_field
import scrap.models.fields.money_field
import scrap.models.wide_filter
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
            ],
            options={
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='CommonItemName',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommonItemNameGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('uncommon_item_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1024), blank=True, default=list, size=None)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.category')),
                ('name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_groups', to='inventory.commonitemname')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
                ('abbreviation', models.CharField(blank=True, default='', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='vendor/donator name', max_length=1024)),
                ('active', models.BooleanField(default=True, help_text='is a usable source')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RawState',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='short name of the status', max_length=1024)),
                ('description', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='Short description of the status', max_length=1024)),
                ('value', models.IntegerField(help_text='incrementing value to help sort progress')),
                ('failed', models.BooleanField()),
                ('next_error_state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reset_state', to='inventory.rawstate')),
                ('next_state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prev_state', to='inventory.rawstate')),
            ],
            options={
                'ordering': ('value',),
            },
        ),
        migrations.CreateModel(
            name='RawItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
                ('unit_size', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
                ('pack_quantity', scrap.models.fields.decimal_field.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('unit_quantity', models.IntegerField(default=1, help_text='For unit_size=ct/dz, this converts that to a number')),
                ('better_name', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='Less cryptic item name', max_length=1024)),
                ('item_code', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
                ('extra_code', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
                ('item_comment', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='Anything noteworthy about this item', max_length=1024)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_items', related_query_name='raw_items', to='inventory.category')),
                ('common_item_name_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.commonitemnamegroup')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_items', related_query_name='raw_items', to='inventory.source')),
            ],
            bases=(scrap.models.wide_filter.WideFilterModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RawIncomingItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('source', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='source name', max_length=1024)),
                ('department', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='department name', max_length=1024)),
                ('customer_number', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
                ('order_number', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='possibly unique text - some sources repeat or slightly modify this for back-ordered items', max_length=1024)),
                ('po_text', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='optional text on the invoice', max_length=1024)),
                ('order_comment', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='Anything noteworthy about this order', max_length=1024)),
                ('order_date', models.DateField(blank=True, help_text='When the order was placed.', null=True)),
                ('delivery_date', models.DateField(help_text='When did we get the items.  Not when the items were shipped.')),
                ('total_price', scrap.models.fields.money_field.MoneyField(decimal_places=4, default=0, max_digits=10)),
                ('total_packs', scrap.models.fields.decimal_field.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('line_item_position', models.PositiveSmallIntegerField(null=True, verbose_name='Position')),
                ('category', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='meat, dairy, produce, etc.', max_length=1024)),
                ('name', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
                ('ordered_quantity', scrap.models.fields.decimal_field.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('delivered_quantity', scrap.models.fields.decimal_field.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('item_code', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
                ('extra_code', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
                ('unit_size', scrap.models.fields.char_field.CharField(blank=True, default='', max_length=1024)),
                ('unit_quantity', models.IntegerField(default=1, help_text='For unit_size=ct/dz, this converts that to a number')),
                ('total_weight', scrap.models.fields.decimal_field.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('pack_quantity', scrap.models.fields.decimal_field.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('pack_price', scrap.models.fields.money_field.MoneyField(decimal_places=4, default=0, max_digits=10)),
                ('pack_tax', scrap.models.fields.money_field.MoneyField(decimal_places=4, default=0, max_digits=10)),
                ('extended_price', scrap.models.fields.money_field.MoneyField(decimal_places=4, default=0, max_digits=10)),
                ('item_comment', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='Anything noteworthy about this item', max_length=1024)),
                ('scanned_image_filename', scrap.models.fields.char_field.CharField(blank=True, default='', help_text='Filename of the scanned file.  Might have multiple per order.', max_length=1024)),
                ('failure_reasons', models.TextField(blank=True, null=True)),
                ('category_obj', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.category')),
                ('department_obj', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.department')),
                ('rawitem_obj', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_query_name='raw_incoming_items', to='inventory.rawitem')),
                ('source_obj', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.source')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_items', related_query_name='raw_items', to='inventory.rawstate')),
            ],
            options={
                'ordering': ('delivery_date', 'source', 'order_number', 'line_item_position'),
            },
            bases=(scrap.models.wide_filter.WideFilterModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='commonitemname',
            name='common_item_name_group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='names', related_query_name='names', to='inventory.commonitemnamegroup'),
        ),
        migrations.AddConstraint(
            model_name='rawstate',
            constraint=models.UniqueConstraint(fields=('value',), name='unique_raw_state_value'),
        ),
        migrations.AddConstraint(
            model_name='rawitem',
            constraint=models.UniqueConstraint(django.db.models.expressions.F('source'), django.db.models.expressions.F('name'), django.db.models.expressions.F('unit_size'), django.db.models.expressions.F('pack_quantity'), name='source-name-unit_size-pack_quantity'),
        ),
    ]
