Windows
Load a plain-text sql file.  The order of the options and the surrounding double quotes is oddly important.
"C:\Program Files\PostgreSQL\15\bin\psql.exe" -f pg_dump_2023-21-08_133047.sql "host='localhost' port='5432' dbname='inventory_test' user='inventory_user'" 2>>&1

Linux
?

Windows Powershell uses back tick ` to escape spaces in path.
C:\Program` Files\PostgreSQL\15\bin\pg_dump.exe -U inventory_user -d inventory_db_v7 --file=pg_dump-2024-09-19.sql --format=p --if-exists --clean --create --blobs --column-inserts --inserts --rows-per-insert=100


# export database on windows
C:\Program` Files\PostgreSQL\15\bin\pg_dump.exe
-U inventory_user -d inventory_db_v7
--file=pg_dump-2024-09-19.sql  file to save as
                   --format=p  plain text (sql)
                  --if-exists  don't error if object doesn't exist during drops
                      --clean  remove structure
                     --create  create structure
                      --blobs  Include binary large objects
             --column-inserts  Specify columns in the insert statements
                    --inserts  Use inserts instead of copy
        --rows-per-insert=100  Do 100 records per insert statement


C:\Program` Files\PostgreSQL\15\bin\pg_dump.exe -U inventory_user -d inventory_db_v7 --file=pg_dump-2024-09-20-schema-utf8.sql --format=p --encoding=UTF8 --schema-only --if-exists --clean --create --blobs --column-inserts --inserts --rows-per-insert=100
C:\Program` Files\PostgreSQL\15\bin\pg_dump.exe -U inventory_user -d inventory_db_v7 --file=pg_dump-2024-09-20-data-utf8.sql --format=p --encoding=UTF8 --data-only --blobs --column-inserts --inserts --rows-per-insert=100


################################################################################################

# not binary export from windows(powershell)
C:\Program` Files\PostgreSQL\15\bin\pg_dump.exe -U inventory_user -d inventory_db_v7 > pg_dump-2024-09-20.bak
TRY: C:\Program` Files\PostgreSQL\15\bin\pg_dump.exe -U inventory_user -d inventory_db_v7 -p 5432 -h localhost -f tmp\pg_dump-2024-09-30.bak
# not binary import on linux
psql postgres < "/drive/folder/backup.bak"
iconv -f UTF-16LE -t UTF-8 ../../../pg_dump-2024-09-20.bak | psql -U inventory_user -d inventory_db_v7 -p 5432 -h localhost


# not binary export from linux
pg_dump -U inventory_user -d inventory_db_v7 -p 5432 -h localhost -f tmp/pg_dump-2024-09-23.bak
    pg_dump: error: server version: 16.4; pg_dump version: 14.13 (Ubuntu 14.13-0ubuntu0.22.04.1)
    pg_dump: error: aborting because of server version mismatch
# Removing v14 client, adding apt repo as described in https://www.postgresql.org/download/linux/ubuntu/, and installing v16 client.
sudo apt remove postgresql-client
sudo apt autoremove
sudo install -d /usr/share/postgresql-common/pgdg
sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
sudo apt update
sudo apt install postgresql-client
# Redoing the pg_dump works fine now.
pg_dump -U inventory_user -d inventory_db_v7 -p 5432 -h localhost -f tmp/pg_dump-2024-09-30.bak

# not binary import on windows (powershell)
C:\Program` Files\PostgreSQL\15\bin\pg_dump.exe -U inventory_user -d inventory_db_v7 -f tmp\pg_dump-2024-09-30.bak
# not binary import on windows (cmd)
"C:\Program Files\PostgreSQL\15\bin\psql.exe" -f tmp\pg_dump-2024-09-30.bak "host='localhost' port='5432' dbname='inventory_db_v7' user='inventory_user'" 2>>&1


##### Creating new database and importing a pg_dump.
# Run the initial script that creates a database and sets it up to the minimum for loading a pgdump.  Ignore the 'user already exists' error.
(inventory-venv) adam@bequietdesktop:~/SeniorCenterProjects/Inventory/inventory-v7$ docker exec -i inventory_db psql -U postgres < initial-database.sql
    ERROR:  role "inventory_user" already exists
    DROP DATABASE
    CREATE DATABASE
    ALTER DATABASE
    You are now connected to database "inventory_db_20241004" as user "postgres".
    CREATE EXTENSION

# Do not run migrations.  The .bak includes create scripts.
# ~python manage.py migrate~

# Did not work.  Not sure why setting PGPASSWORD this way doesn't as it works when set via import/export scripts.
(inventory-venv) adam@bequietdesktop:~/SeniorCenterProjects/Inventory/inventory-v7/v7/web$ export PGPASSWORD="$(grep "^DB_PASSWORD" ../.env | cut -c13-)"
(inventory-venv) adam@bequietdesktop:~/SeniorCenterProjects/Inventory/inventory-v7/v7/web$ iconv -f UTF-16LE -t UTF-8 ./data/pg_dump-2024-10-04.bak | psql -U inventory_user -d inventory_db_20241004 -p 5432 -h localhost

# worked w/o asking for password (as it is done via django).  Will show lots of errors if migrations were run.
(inventory-venv) adam@bequietdesktop:~/SeniorCenterProjects/Inventory/inventory-v7/v7/web$ cat data/pg_dump-2024-10-04.bak | python manage.py dbshell

# Use the create database script created from the runscript export command.
(inventory-venv) adam@bequietdesktop:~/SeniorCenterProjects/Inventory/inventory-v7/v7/web$ docker exec -i inventory_db psql -U postgres < data/initial_2024-10-05_120837_create_database.sql


################################################################################################
# Jobs to export/import from windows to linux
# On windows
pg_dump -j 8 -Fd -f /tmp/newout.dir DATABASE
# On linux
createdb DATABASE
pg_restore -j 8 --format=d -d DATABASE /tmp/newout.dir/

